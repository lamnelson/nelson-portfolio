This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-24T15:59:42.546Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.github/
  workflows/
    build.yml
    code-quality.yml
    docker-image.yml
  renovate.json
.husky/
  commit-msg
  pre-commit
  pre-push
public/
  site.webmanifest
src/
  app/
    (home)/
      page.tsx
    dashboard/
      page.tsx
    layout.tsx
  components/
    common/
      main-nav.tsx
      mobile-nav.tsx
      providers.tsx
      render-if.tsx
      site-footer.tsx
      site-header.tsx
    dashboard/
      current-time/
        components/
          day-component.tsx
          night-component.tsx
          time-card.tsx
        current-time-card.tsx
      discord/
        timer/
          elapsed-time.tsx
        utils/
          time.ts
        discord-activity-card.tsx
        discord-activity.tsx
        discord-status.tsx
      discord-link/
        discord-link-card.tsx
      dashboard-config.ts
    experience/
      experience-card.tsx
      experience-config.ts
      experience-description.tsx
      experience.tsx
    projects/
      github-repository-hover-card.tsx
      projects.tsx
    ui/
      alert.tsx
      aurora-background.tsx
      avatar.tsx
      badge.tsx
      button.tsx
      card.tsx
      collapsible.tsx
      dropdown-menu.tsx
      icons.tsx
      mode-toggle.tsx
      page-header.tsx
      reveal.tsx
      section-layout.tsx
      separator.tsx
      sheet.tsx
      skeleton.tsx
      tooltip.tsx
      tracing-beam.tsx
      typewriter-effect.tsx
    about.tsx
    hero-section.tsx
  config/
    mainNav.ts
    site.ts
  lib/
    api/
      github.ts
      time.ts
    utils.ts
  styles/
    globals.css
  types/
    enum.ts
    index.d.ts
.gitignore
.nvmrc
biome.json
components.json
Dockerfile
next.config.mjs
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .github/workflows/build.yml
================
name: Build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install

      - name: Run Build
        run: pnpm run build

================
File: .github/workflows/code-quality.yml
================
name: Code Quality

on: [push]

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Biome
        uses: biomejs/setup-biome@v2
        with:
          version: latest
      - name: Run Biome
        run: biome ci .

================
File: .github/workflows/docker-image.yml
================
name: Docker Image CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_Token }}

      - name: Prepare Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

================
File: .github/renovate.json
================
{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": ["config:recommended", "customManagers:biomeVersions"],
  "labels": ["chore: dependencies"],
  "dependencyDashboard": true,
  "packageRules": [
    {
      "matchUpdateTypes": ["minor", "patch", "pin", "digest"],
      "groupName": "all non-major dependencies",
      "groupSlug": "all-minor-patch",
      "automerge": true
    },
    {
      "matchPackageNames": ["@biomejs/biome"],
      "groupName": "biome",
      "groupSlug": "biome",
      "automerge": true
    },
    {
      "matchPackageNames": ["@commitlint/cli", "@commitlint/config-conventional"],
      "groupName": "commitlint",
      "groupSlug": "commitlint",
      "automerge": true
    },
    {
      "matchPackageNames": ["@types/node", "@types/react", "@types/react-dom"],
      "groupName": "types",
      "groupSlug": "types",
      "automerge": true
    },
    {
      "matchPackageNames": ["autoprefixer", "postcss", "tailwindcss"],
      "groupName": "postcss",
      "groupSlug": "postcss",
      "automerge": true
    },
    {
      "matchPackagePatterns": ["^@radix-ui/react-"],
      "groupName": "radix-ui",
      "groupSlug": "radix-ui",
      "automerge": true
    },
    {
      "matchPackageNames": ["class-variance-authority", "clsx"],
      "groupName": "class-utils",
      "groupSlug": "class-utils",
      "automerge": true
    },
    {
      "matchPackageNames": ["tailwind-merge", "tailwindcss-animate"],
      "groupName": "tailwind-utils",
      "groupSlug": "tailwind-utils",
      "automerge": true
    }
  ]
}

================
File: .husky/commit-msg
================
pnpm --no-install commitlint --edit "$1"

================
File: .husky/pre-commit
================
pnpm lint-staged

================
File: .husky/pre-push
================
pnpm build

================
File: public/site.webmanifest
================
{
  "name": "",
  "short_name": "",
  "icons": [
    { "src": "/favicons/android-chrome-192x192.png", "sizes": "192x192", "type": "image/png" },
    { "src": "/favicons/android-chrome-512x512.png", "sizes": "512x512", "type": "image/png" }
  ],
  "theme_color": "#ffffff",
  "background_color": "#ffffff",
  "display": "standalone"
}

================
File: src/app/(home)/page.tsx
================
import { About } from "@/components/about";
import { Experience } from "@/components/experience/experience";
import { HeroSection } from "@/components/hero-section";
import { Projects } from "@/components/projects/projects";
import { AuroraBackground } from "@/components/ui/aurora-background";
import { SectionLayout } from "@/components/ui/section-layout";
import { fetchGithubRepos } from "@/lib/api/github";

export default async function Home() {
  const githubRepos = await fetchGithubRepos();

  return (
    <>
      <AuroraBackground>
        <HeroSection className="container relative" />
      </AuroraBackground>
      <SectionLayout className="container relative">
        <About />
        <Experience />
        <Projects repositories={githubRepos} />
      </SectionLayout>
    </>
  );
}

================
File: src/app/dashboard/page.tsx
================
import type { Metadata } from "next";

import { CurrentTimeCard } from "@/components/dashboard/current-time/current-time-card";
import { DiscordLinkCard } from "@/components/dashboard/discord-link/discord-link-card";
import { DiscordActivity } from "@/components/dashboard/discord/discord-activity";
import { PageHeader, PageHeaderDescription, PageHeaderHeading } from "@/components/ui/page-header";
import { fetchWeatherForecast } from "@/lib/api/time";

export const metadata: Metadata = {
  description: "Statistics about my activities",
  title: "Dashboard",
};

export default async function Dashboard() {
  const weatherForecast = await fetchWeatherForecast();

  return (
    <section className="container relative max-w-3xl space-y-4">
      <PageHeader className="items-start">
        <PageHeaderHeading className="font-semibold text-2xl sm:text-2xl md:text-2xl lg:text-2xl">
          Dashboard
        </PageHeaderHeading>
        <PageHeaderDescription className="font-light text-muted sm:text-base md:text-base lg:text-base">
          Statistics about my activities
        </PageHeaderDescription>
      </PageHeader>

      <div className="flex flex-wrap gap-2">
        <DiscordActivity />
        <div className="flex size-full flex-wrap gap-4">
          <DiscordLinkCard />
          <CurrentTimeCard data={weatherForecast} />
        </div>
      </div>
    </section>
  );
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import type { PropsWithChildren } from "react";

import { Analytics } from "@vercel/analytics/next";
import { SpeedInsights } from "@vercel/speed-insights/next";
import { Raleway } from "next/font/google";

import { ThemeProvider } from "@/components/common/providers";
import { SiteFooter } from "@/components/common/site-footer";
import { SiteHeader } from "@/components/common/site-header";
import { siteConfig } from "@/config/site";
import "@/styles/globals.css";

const raleway = Raleway({
  subsets: ["latin"],
  variable: "--heading-font",
});

export const metadata: Metadata = {
  authors: [{ name: "Edwin Hernandez", url: siteConfig.links.linkedin }],
  creator: "Edwin Hernandez",
  description: siteConfig.description,
  icons: {
    apple: "/favicons/apple-touch-icon.png",
    icon: "/favicons/favicon.ico",
    shortcut: "/favicons/favicon-16x16.png",
  },
  keywords: siteConfig.keywords,
  manifest: "/site.webmanifest",
  metadataBase: new URL(siteConfig.url),
  openGraph: {
    description: siteConfig.description,
    images: [
      {
        alt: siteConfig.name,
        height: 630,
        url: siteConfig.opImage,
        width: 1200,
      },
    ],
    locale: "en_US",
    siteName: siteConfig.name,
    title: siteConfig.name,
    type: "website",
    url: siteConfig.url,
  },
  title: {
    default: "Edwin Hernandez - Coffee Lover",
    template: `%s | ${siteConfig.name}`,
  },
  twitter: {
    card: "summary_large_image",
    creator: "@edwinhern15",
    description: siteConfig.description,
    images: [siteConfig.opImage],
    title: siteConfig.name,
  },
};

const RootLayout: React.FC<PropsWithChildren> = ({ children }) => {
  return (
    <html lang="en" suppressHydrationWarning>
      <head />
      <body className={raleway.variable}>
        <ThemeProvider attribute="class" defaultTheme="system" disableTransitionOnChange enableSystem>
          <SiteHeader />
          <main className="relative flex min-h-screen flex-col">
            <div className="flex-1 overflow-hidden">{children}</div>
          </main>
          <SiteFooter />
          <SpeedInsights />
          <Analytics />
        </ThemeProvider>
      </body>
    </html>
  );
};

export default RootLayout;

================
File: src/components/common/main-nav.tsx
================
import Link from "next/link";

import { mainNav } from "@/config/mainNav";
import { siteConfig } from "@/config/site";
import { cn } from "@/lib/utils";

export function MainNav() {
  return (
    <div className="flex">
      <Link className="mr-4" href="/">
        <span className="font-bold font-heading text-lg">{siteConfig.siteTitle}</span>
      </Link>
      <nav className="mt-[0.099rem] hidden items-center gap-6 text-sm md:flex">
        {mainNav.map((item) => (
          <Link className={cn("transition-colors hover:text-foreground/80")} href={item.href} key={item.title}>
            {item.title}
          </Link>
        ))}
      </nav>
    </div>
  );
}

================
File: src/components/common/mobile-nav.tsx
================
"use client";

import { useCallback, useState } from "react";

import { Command } from "lucide-react";
import Link, { type LinkProps } from "next/link";

import { Button } from "@/components/ui/button";
import { MobileModeToggleButton } from "@/components/ui/mode-toggle";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { mainNav } from "@/config/mainNav";
import { siteConfig } from "@/config/site";
import { cn } from "@/lib/utils";

export function MobileNav() {
  const [open, setOpen] = useState(false);

  return (
    <Sheet onOpenChange={setOpen} open={open}>
      <SheetTrigger asChild>
        <Button className="flex w-9 px-0 md:hidden" variant={"ghost"}>
          <Command className="size-5" />
          <span className="sr-only">Toggle Menu</span>
        </Button>
      </SheetTrigger>
      <SheetContent className="container pr-0" side="right">
        <div className="container my-4 h-[calc(100vh-8rem)] pb-10 pl-6">
          <div className="flex flex-col space-y-3">
            <MobileLink className="w-fit" href="/" onOpenChange={setOpen}>
              <span className="font-bold font-heading">{siteConfig.siteTitle}</span>
            </MobileLink>
            {mainNav.map((item) => (
              <MobileLink className="border-b" href={item.href} key={item.href} onOpenChange={setOpen}>
                {item.title}
              </MobileLink>
            ))}
            <MobileModeToggleButton />
          </div>
        </div>
      </SheetContent>
    </Sheet>
  );
}

interface MobileLinkProps extends LinkProps {
  children: React.ReactNode;
  className?: string;
  onOpenChange: (open: boolean) => void;
}

function MobileLink({ children, className, href, onOpenChange }: MobileLinkProps) {
  const handleLinkClick = useCallback(() => onOpenChange(false), [onOpenChange]);
  return (
    <Link className={cn(className)} href={href} onClick={handleLinkClick}>
      {children}
    </Link>
  );
}

================
File: src/components/common/providers.tsx
================
"use client";

import { ThemeProvider as NextThemesProvider } from "next-themes";
import type { ThemeProviderProps } from "next-themes/dist/types";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}

================
File: src/components/common/render-if.tsx
================
interface RenderIfProps {
  children: React.ReactNode;
  fallback?: React.ReactNode;
  when: boolean;
}

export const RenderIf: React.FC<RenderIfProps> = ({ children, fallback = null, when }) => (when ? children : fallback);

================
File: src/components/common/site-footer.tsx
================
import { siteConfig } from "@/config/site";

export function SiteFooter() {
  return (
    <footer className="border-border/40 border-t py-6 md:py-0">
      <div className="container flex max-w-screen-2xl flex-col items-center justify-between md:h-14 md:flex-row">
        <div className="text-balance text-center text-muted text-sm leading-loose md:text-left">
          Built by{" "}
          <a
            className="font-medium underline underline-offset-4"
            href={siteConfig.links.linkedin}
            rel="noreferrer"
            target="_blank"
          >
            edwinhern
          </a>
          . The source code is available on{" "}
          <a
            className="font-medium underline underline-offset-4"
            href={siteConfig.links.githubRepo}
            rel="noreferrer"
            target="_blank"
          >
            GitHub
          </a>
          .
        </div>
      </div>
    </footer>
  );
}

================
File: src/components/common/site-header.tsx
================
import Link from "next/link";

import { MainNav } from "@/components/common/main-nav";
import { MobileNav } from "@/components/common/mobile-nav";
import { buttonVariants } from "@/components/ui/button";
import { Icons } from "@/components/ui/icons";
import { ModeToggleButton } from "@/components/ui/mode-toggle";
import { siteConfig } from "@/config/site";
import { cn } from "@/lib/utils";

export function SiteHeader() {
  return (
    <header className="sticky top-0 z-50 w-full border-border/40 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-14 max-w-screen-2xl items-center">
        <MainNav />

        <div className="flex flex-1 items-center justify-end">
          <Link href={siteConfig.links.github} rel="noreferrer" target="_blank">
            <div className={cn(buttonVariants({ variant: "ghost" }), "w-9 px-0")}>
              <Icons.gitHub className="size-4" />
              <span className="sr-only">GitHub</span>
            </div>
          </Link>

          <Link href={siteConfig.links.linkedin} rel="noreferrer" target="_blank">
            <div className={cn(buttonVariants({ variant: "ghost" }), "w-9 px-0")}>
              <Icons.linkedIn className="size-4 fill-current" />
              <span className="sr-only">LinkedIn</span>
            </div>
          </Link>
          <ModeToggleButton className="hidden md:flex" />
          <MobileNav />
        </div>
      </div>
    </header>
  );
}

================
File: src/components/dashboard/current-time/components/day-component.tsx
================
import { motion } from "framer-motion";

import TimeCard from "./time-card";

const DayComponent: React.FC = () => {
  return (
    <TimeCard bgClassName="bg-gradient-to-br from-[#0A8DFF] to-[#98CFFF]" timeClassName="text-current">
      <motion.div
        animate={{
          scale: [1, 1.1, 1.1, 1, 1],
        }}
        className="absolute right-0 bottom-0 rounded-tl-full bg-white/10 pt-2 pl-2 md:pt-4 md:pl-4"
        transition={{
          duration: 4,
          ease: "easeInOut",
          repeat: Number.POSITIVE_INFINITY,
          repeatType: "reverse",
        }}
      >
        <motion.div>
          <div className="right-0 bottom-0 rounded-tl-full bg-white/20 pt-2 pl-2 md:pt-4 md:pl-4">
            <div className="right-0 bottom-0 rounded-tl-full bg-white/20 pt-2 pl-2 md:pt-4 md:pl-4">
              <motion.div
                animate={{ scale: [1, 0.9, 0.9, 1, 1] }}
                className="relative size-48 rounded-tl-full bg-[#FEEA9A]"
                initial={false}
                transition={{
                  duration: 4,
                  ease: "easeInOut",
                  repeat: Number.POSITIVE_INFINITY,
                  repeatType: "reverse",
                }}
              />
            </div>
          </div>
        </motion.div>
      </motion.div>
    </TimeCard>
  );
};

export default DayComponent;

================
File: src/components/dashboard/current-time/components/night-component.tsx
================
"use client";

import { useEffect, useRef } from "react";

import { motion } from "framer-motion";

import TimeCard from "./time-card";

const NightComponent: React.FC = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    if (!canvasRef.current) return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;

    // set canvas dimensions
    const isMobile = window.innerWidth < 768;
    canvas.width = isMobile ? window.innerWidth : window.innerWidth / 3;
    canvas.height = isMobile ? window.innerHeight : window.innerHeight / 3;

    // draw some stars
    for (let i = 0; i < 100; i++) {
      ctx.fillStyle = "white";
      ctx.beginPath();
      ctx.arc(Math.random() * canvas.width, Math.random() * canvas.height, Math.random() * 2, 0, Math.PI * 2);
      ctx.fill();
    }
  }, []);

  return (
    <TimeCard bgClassName="bg-[#001324]" timeClassName="text-white">
      <canvas className="absolute inset-0 size-full opacity-70 md:opacity-100" ref={canvasRef} />
      <motion.div
        animate={{ scale: [1, 1.1, 1.1, 1, 1] }}
        className="absolute right-0 bottom-0 rounded-tl-full bg-white/10 pt-2 pl-2 md:pt-4 md:pl-4"
        transition={{
          duration: 4,
          ease: "easeInOut",
          repeat: Number.POSITIVE_INFINITY,
          repeatType: "reverse",
        }}
      >
        <motion.div>
          <div className="right-0 bottom-0 rounded-tl-full bg-white/20 pt-2 pl-2 md:pt-4 md:pl-4">
            <div className="right-0 bottom-0 rounded-tl-full bg-white/20 pt-2 pl-2 md:pt-4 md:pl-4">
              <motion.div
                animate={{ scale: [1, 0.9, 0.9, 1, 1] }}
                className="relative size-48 rounded-tl-full bg-[#DFDFDF]"
                initial={false}
                transition={{
                  duration: 4,
                  ease: "easeInOut",
                  repeat: Number.POSITIVE_INFINITY,
                  repeatType: "reverse",
                }}
              />
              <div className="absolute top-14 left-12 size-2 rounded-full bg-[#C2C2C2] md:top-16 md:left-28 md:size-4 xl:top-20 xl:left-56 xl:size-12" />
              <div className="absolute top-10 left-14 size-4 rounded-full bg-[#C2C2C2] md:top-24 md:left-[115px] xl:top-36 xl:left-[230px] xl:size-8" />
              <div className="absolute top-10 left-10 size-2 rounded-full bg-[#C2C2C2] md:top-20 md:left-20 md:size-8 xl:top-32 xl:left-36 xl:size-16" />
            </div>
          </div>
        </motion.div>
      </motion.div>
    </TimeCard>
  );
};

export default NightComponent;

================
File: src/components/dashboard/current-time/components/time-card.tsx
================
"use client";

import type { PropsWithChildren } from "react";
import { useEffect, useState } from "react";

import { RenderIf } from "@/components/common/render-if";
import { Skeleton } from "@/components/ui/skeleton";
import { cn } from "@/lib/utils";

import { USTimeFormatter } from "../../dashboard-config";

interface TimeCardProps extends PropsWithChildren {
  bgClassName: React.ComponentProps<"div">["className"];
  timeClassName: React.ComponentProps<"div">["className"];
}

const TimeCard: React.FC<TimeCardProps> = ({ bgClassName, children, timeClassName }) => {
  const [time, setTime] = useState<string | undefined>(undefined);

  useEffect(() => {
    const interval = setInterval(() => {
      setTime(USTimeFormatter.format(new Date()));
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="relative col-span-1 row-span-1 size-full overflow-auto rounded-lg">
      {/* Background */}
      <div className={cn("absolute inset-0 h-full", bgClassName)} />

      {/* Time and location */}
      <div className={cn("relative z-10 flex h-full flex-col p-4", timeClassName)}>
        <div className="flex items-center space-x-2">
          <RenderIf
            fallback={
              <>
                <Skeleton className="size-2 rounded-full bg-current md:size-3" />
                <Skeleton className="h-6 w-20 md:h-8 md:w-32" />
              </>
            }
            when={Boolean(time)}
          >
            <div className="size-2 animate-pulse rounded-full bg-current md:size-3" />
            <div className="font-semibold text-xl md:text-3xl">{time}</div>
          </RenderIf>
        </div>

        <RenderIf fallback={<Skeleton className="mt-2 h-4 w-24 md:h-6 md:w-32" />} when={Boolean(time)}>
          <div className="text-current text-lg md:text-2xl">in Dallas, TX</div>
        </RenderIf>
      </div>

      {/* Additional content (e.g., sun or stars) */}
      {children}
    </div>
  );
};

export default TimeCard;

================
File: src/components/dashboard/current-time/current-time-card.tsx
================
"use client";

import { useMemo } from "react";

import { add, isAfter } from "date-fns";

import { Card } from "@/components/ui/card";
import { Reveal } from "@/components/ui/reveal";

import DayComponent from "./components/day-component";
import NightComponent from "./components/night-component";

interface CurrentTimeCardProps {
  data: WeatherForecast | null;
}

export const CurrentTimeCard: React.FC<CurrentTimeCardProps> = ({ data }) => {
  const [sunriseTime, sunsetTime] = useMemo(() => {
    if (!data) return [null, null];

    return [new Date(data.results.sunrise), new Date(data.results.sunset)];
  }, [data]);

  const timeComponent = useMemo(() => {
    if (!data || !sunriseTime || !sunsetTime) return null;

    const now = new Date();
    if (isAfter(now, add(sunsetTime, { hours: 1 }))) {
      return <NightComponent />;
    }

    if (isAfter(now, sunriseTime)) {
      return <DayComponent />;
    }

    return <NightComponent />;
  }, [data, sunriseTime, sunsetTime]);

  return (
    <Reveal
      className="relative flex h-64 flex-1"
      initial="visible"
      whileHover={{
        scale: 1.02,
        transition: { duration: 0.4, ease: "easeInOut" },
      }}
    >
      <Card className="size-full">{timeComponent}</Card>
    </Reveal>
  );
};

================
File: src/components/dashboard/discord/timer/elapsed-time.tsx
================
"use client";

import { useEffect, useState } from "react";

import { discordTimestamp } from "../utils/time";

interface TimestampProps {
  unixTimestamp: number;
}

export function ElapsedTime({ unixTimestamp }: TimestampProps) {
  const [timeAgo, setTimeAgo] = useState(discordTimestamp(unixTimestamp));

  useEffect(() => {
    const intervalId = setInterval(() => {
      setTimeAgo(discordTimestamp(unixTimestamp));
    }, 1000);

    return () => clearInterval(intervalId);
  }, [unixTimestamp]);

  return <>{timeAgo}</>;
}

================
File: src/components/dashboard/discord/utils/time.ts
================
export function discordTimestamp(unixTimestamp: number): string {
  const durationInMilliseconds = Date.now() - unixTimestamp;
  const seconds = Math.floor(durationInMilliseconds / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);

  if (days > 0) {
    const remainingHours = hours % 24;
    return `${days} day${days > 1 ? "s" : ""}${
      remainingHours > 0 ? `, ${remainingHours} hour${remainingHours > 1 ? "s" : ""}` : ""
    }`;
  } else if (hours > 0) {
    const remainingMinutes = minutes % 60;
    return `${hours} hour${hours > 1 ? "s" : ""}${
      remainingMinutes > 0 ? `, ${remainingMinutes} minute${remainingMinutes > 1 ? "s" : ""}` : ""
    }`;
  } else if (minutes > 0) {
    const remainingSeconds = seconds % 60;
    return `${minutes} minute${minutes > 1 ? "s" : ""}${
      remainingSeconds > 0 ? `, ${remainingSeconds} second${remainingSeconds > 1 ? "s" : ""}` : ""
    }`;
  } else {
    return `${seconds} second${seconds !== 1 ? "s" : ""}`;
  }
}

================
File: src/components/dashboard/discord/discord-activity-card.tsx
================
import type { Activity, Data, Spotify } from "use-lanyard";

import Image from "next/image";

import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

import { ElapsedTime } from "./timer/elapsed-time";

interface DiscordActivityCardProps {
  activity: Activity;
  data: Data;
}

function ActivityImage({ activity, data }: { activity: Activity; data: Data }) {
  const isSpotify = activity.assets?.large_image?.startsWith("spotify:");
  const imageUrl = isSpotify
    ? (data.spotify as Spotify)?.album_art_url
    : activity.assets?.large_image
      ? `https://cdn.discordapp.com/app-assets/${activity.application_id}/${activity.assets.large_image}.png`
      : `https://dcdn.dstn.to/app-icons/${activity.application_id}.webp?size=2048`;

  if (!activity.assets && !activity.application_id) {
    return (
      <Image
        alt="Discord Icon"
        className="flex size-20 items-center justify-center rounded bg-card object-cover"
        height={1000}
        src={"/assets/gifs/discord.gif"}
        width={1200}
      />
    );
  }

  return (
    <Image
      alt="Activity Image"
      className="size-20 rounded object-cover"
      height={1000}
      src={imageUrl as string}
      width={1200}
    />
  );
}

export function DiscordActivityCard({ activity, data }: DiscordActivityCardProps) {
  return (
    <Alert className="flex flex-col items-center gap-3 border-none bg-secondary text-center sm:flex-row sm:text-left">
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger>
            <ActivityImage activity={activity} data={data} />
          </TooltipTrigger>
          <TooltipContent>
            {activity.assets ? activity.assets.large_text || activity.name : activity.name}
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
      <div>
        <AlertTitle className="line-clamp-1">{activity.name}</AlertTitle>
        <AlertDescription className="line-clamp-1">{activity.details || null}</AlertDescription>
        <AlertDescription className="line-clamp-1">{activity.state || null}</AlertDescription>

        <AlertDescription className="line-clamp-1">
          {activity.timestamps?.start ? <ElapsedTime unixTimestamp={activity.timestamps.start} /> : null}
        </AlertDescription>
      </div>
    </Alert>
  );
}

================
File: src/components/dashboard/discord/discord-activity.tsx
================
"use client";

import type { Activity, Data } from "use-lanyard";

import { useLanyardWS } from "use-lanyard";

import { RenderIf } from "@/components/common/render-if";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Reveal } from "@/components/ui/reveal";
import { Skeleton } from "@/components/ui/skeleton";

import { DiscordActivityCard } from "./discord-activity-card";
import { DiscordStatus } from "./discord-status";

const NoDataSkeleton = () => (
  <div className="flex flex-col gap-2">
    <div className="flex gap-2">
      <Skeleton className="size-10 rounded-full" />
      <Skeleton className="h-10 w-28 md:w-56" />
    </div>
    <Skeleton className="h-8 w-full" />
  </div>
);

const ActivityFeed = ({ activities, lanyard }: { activities: Activity[]; lanyard: Data }) => (
  <>
    {activities?.map(
      (activity, idx) =>
        activity.name !== "Custom Status" && (
          <DiscordActivityCard activity={activity} data={lanyard as Data} key={`${activity.name}-${idx}`} />
        ),
    )}
  </>
);

export const DiscordActivity = () => {
  const userID = BigInt("196399908771725312");
  const lanyard = useLanyardWS(`${userID}`);

  return (
    <Reveal
      className="relative flex flex-1"
      initial="visible"
      whileHover={{
        scale: 1.02,
        transition: { duration: 0.4, ease: "easeInOut" },
      }}
    >
      <Card className="w-full">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="font-medium text-base">Discord activity</CardTitle>
        </CardHeader>

        <CardContent className="flex flex-col gap-4">
          {/* Render if no data is present */}
          <RenderIf when={!lanyard}>
            <NoDataSkeleton />
          </RenderIf>

          <RenderIf when={Boolean(lanyard?.discord_status)}>
            <DiscordStatus data={lanyard as Data} />

            {/* Render if no activities */}
            <RenderIf when={!lanyard?.activities?.length}>
              <Alert className="border-none bg-secondary">
                <AlertDescription>No activities currently.</AlertDescription>
              </Alert>
            </RenderIf>

            {/* Render activities */}
            <RenderIf when={Boolean(lanyard?.activities?.some((a) => a?.name !== "Custom Status"))}>
              <ActivityFeed activities={lanyard?.activities || []} lanyard={lanyard as Data} />
            </RenderIf>
          </RenderIf>
        </CardContent>
      </Card>
    </Reveal>
  );
};

================
File: src/components/dashboard/discord/discord-status.tsx
================
import type { Data } from "use-lanyard";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Icons } from "@/components/ui/icons";
import { cn } from "@/lib/utils";

interface DiscordStatusProps {
  data: Data;
}

export const DiscordStatus: React.FC<DiscordStatusProps> = ({ data }) => {
  const status = (status: Data["discord_status"]) => {
    const statusMap: Record<Data["discord_status"], { cn: string; text: string }> = {
      dnd: { cn: "text-rose-400", text: "Do Not Disturb" },
      idle: { cn: "text-amber-400", text: "Idle" },
      offline: { cn: "text-muted", text: "Offline" },
      online: { cn: "text-emerald-500", text: "Online" },
    };

    return statusMap[status] || statusMap.offline;
  };

  const statusInfo = status(data.discord_status);

  return (
    <div className="flex flex-col items-baseline gap-4 sm:flex-row">
      <div className="flex gap-2">
        <div className="inline-flex items-center justify-center">
          <Avatar>
            <AvatarImage
              src={`https://cdn.discordapp.com/avatars/${data.discord_user.id}/${data.discord_user.avatar}`}
            />
            <AvatarFallback className="animate-pulse" />
          </Avatar>
        </div>
        <div>
          <div className="font-bold text-lg">{data.discord_user.global_name}</div>
          <div className="text-muted text-xs">{data.discord_user.username}</div>
        </div>
      </div>
      <div className={cn("flex gap-2", statusInfo.cn)}>
        <Icons.discord />
        <span className="text-sm">{statusInfo.text}</span>
      </div>
    </div>
  );
};

================
File: src/components/dashboard/discord-link/discord-link-card.tsx
================
"use client";

import { ArrowUpIcon } from "lucide-react";
import Image from "next/image";
import Link from "next/link";

import { Card } from "@/components/ui/card";
import { Reveal } from "@/components/ui/reveal";
import { siteConfig } from "@/config/site";

export const DiscordLinkCard = () => {
  return (
    <Reveal
      initial="visible"
      whileHover={{
        scale: 1.02,
        transition: { duration: 0.4, ease: "easeInOut" },
      }}
    >
      <Card className="relative flex h-64 md:flex-1">
        <Link className="flex size-full items-center justify-center" href={"https://discord.com/users/edwinhern"}>
          <Image
            alt={"Discord Logo"}
            className="scale-75 md:w-72 md:scale-100"
            draggable={false}
            height={1000}
            src={siteConfig.assets.discordGif}
            unoptimized
            width={1200}
          />
        </Link>
        <ArrowUpIcon className="absolute right-0 bottom-0 m-2 size-8 rotate-45" />
      </Card>
    </Reveal>
  );
};

================
File: src/components/dashboard/dashboard-config.ts
================
export const RelativeTimeFormatter = new Intl.RelativeTimeFormat("en", { style: "long" });
export const USTimeFormatter = new Intl.DateTimeFormat("en-US", {
  hour: "numeric",
  hour12: true,
  minute: "numeric",
  timeZone: "America/Chicago",
});

export const discordId = "196399908771725312";

export const dateOfBirth = new Date("2000-12-20");

export const age = new Date(Date.now() - dateOfBirth.getTime()).getUTCFullYear() - 1970;

export const hasBirthdayPassed =
  new Date().getMonth() >= dateOfBirth.getMonth() && new Date().getDate() >= dateOfBirth.getDate();

export const nextBirthdayYear = new Date().getFullYear() + (hasBirthdayPassed ? 1 : 0);

export const daysUntilBirthday = RelativeTimeFormatter.formatToParts(
  Math.floor(
    (new Date(nextBirthdayYear, dateOfBirth.getMonth(), dateOfBirth.getDay() + 1).getTime() - Date.now()) /
      1000 /
      60 /
      60 /
      24,
  ),
  "day",
)[1]!.value.toString();

================
File: src/components/experience/experience-card.tsx
================
import Image from "next/image";

import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Reveal } from "@/components/ui/reveal";

import { calculateExperienceDuration } from "./experience-config";
import { ExperienceDescription } from "./experience-description";

interface ExperienceCardProps extends ExperienceItem {
  index: number;
}

export function ExperienceCard({
  company,
  date,
  description,
  employmentType,
  image,
  index,
  skills,
  title,
}: ExperienceCardProps) {
  const duration = calculateExperienceDuration(date);

  return (
    <Card className="w-full">
      <CardHeader>
        {image && (
          <Image
            alt="Company Logo"
            className="mb-4 animate-reveal rounded-lg object-cover"
            height="900"
            loading={index < 1 ? "eager" : "lazy"}
            src={image}
            width="900"
          />
        )}

        <CardTitle className="font-heading text-xl md:text-2xl">
          <h2>{title}</h2>
        </CardTitle>

        <CardDescription className="text-foreground text-sm md:text-sm">
          {company} · {employmentType}
          <div className="text-muted">
            {date.start} - {date.end} ({duration})
          </div>
        </CardDescription>
      </CardHeader>

      <CardContent className="flex flex-col gap-4">
        <Reveal
          transition={{ duration: 0.4 }}
          variants={{
            hidden: { opacity: 0, x: -50 },
            visible: { opacity: 1, x: 0 },
          }}
        >
          <ExperienceDescription description={description} />
        </Reveal>
      </CardContent>

      <CardFooter>
        {skills && (
          <div className="flex flex-wrap gap-2">
            {skills.map((skill, index) => (
              <Reveal
                key={skill}
                transition={{ delay: index / 40, duration: 0.1 }}
                variants={{
                  hidden: { opacity: 0, y: 30 },
                  visible: { opacity: 1, y: 0 },
                }}
              >
                <Badge className="rounded-md">{skill}</Badge>
              </Reveal>
            ))}
          </div>
        )}
      </CardFooter>
    </Card>
  );
}

================
File: src/components/experience/experience-config.ts
================
import { EmploymentType } from "@/types/enum";

export const experiences: ExperienceItem[] = [
  {
    company: "Tesla Inc.",
    date: {
      end: "Jul 2024",
      start: "Jul 2023",
    },
    description:
      "Worked full-stack to build the admin configuration portal for Tesla's new Payroll System. Transitioned to the frontend team to lead the development of the admin portal. Contributed to backend micro-services using C# and MySQL, and helped in onboarding new team members.",
    employmentType: EmploymentType.FullTime,
    image: "/assets/companies/tesla.jpg",
    skills: ["React", "TypeScript", "C#", "MySQL"],
    title: "Software Engineer II",
  },
  {
    company: "Tesla Inc.",

    date: {
      end: "Dec 2022",
      start: "Aug 2022",
    },
    description:
      "Enhanced the employee persona experience, focusing on features for timecard and schedule views using Angular, as part of Tesla’s new Payroll System. Contributed to backend micro-services using .NET Core.",
    employmentType: EmploymentType.Intern,
    image: "/assets/companies/tesla-02.jpg",
    skills: ["Angular", "TypeScript", "C#", "MySQL"],
    title: "Software Engineer",
  },
  {
    company: "JPMorgan Chase & Co.",
    date: {
      end: "Aug 2022",
      start: "Jun 2022",
    },
    description: "Contributed to a Java/Spring Boot batch application for processing over 100k US home loans.",
    employmentType: EmploymentType.Intern,
    image: "/assets/companies/jpmc.jpg",
    skills: ["Java", "Spring Boot"],
    title: "Software Engineer",
  },
  {
    company: "Engineer's United",
    date: {
      end: "Feb 2022",
      start: "Aug 2020",
    },
    description:
      "Assisted in managing the annual HackUNT event with over 400 participants. Focused on event planning, coordination, and managing relationships with key sponsors like GitHub and JPMorgan. Played a significant role in developing and maintaining the event’s website.",
    employmentType: EmploymentType.PartTime,
    skills: ["Event Planning", "Sponsorship Management"],
    title: "Technical Lead",
  },
  {
    company: "Seizing Every Opportunity (SEO)",
    date: {
      end: "Aug 2021",
      start: "Jun 2021",
    },
    description:
      "Learned full-stack development principles and developed web applications using Python and Flask, deployed on Heroku. Emphasized agile methods, testing, and pair programming, significantly improving technical and team collaboration skills.",
    employmentType: EmploymentType.Intern,
    skills: ["Python", "Flask", "MySQL", "Heroku"],
    title: "Tech Developer",
  },
];

export const calculateExperienceDuration = (date: ExperienceDate) => {
  const startDate = new Date(date.start);
  let endDate = new Date();
  if (date.end !== "Present") {
    endDate = new Date(date.end);
  }
  const months = endDate.getMonth() - startDate.getMonth() + 1 + 12 * (endDate.getFullYear() - startDate.getFullYear());
  const years = Math.floor(months / 12);
  const remainingMonths = months % 12;
  return years > 0
    ? `${years} year${years > 1 ? "s" : ""}${remainingMonths > 0 ? ` and ${remainingMonths} month${remainingMonths > 1 ? "s" : ""}` : ""}`
    : `${remainingMonths} month${remainingMonths > 1 ? "s" : ""}`;
};

================
File: src/components/experience/experience-description.tsx
================
"use client";

import { useState } from "react";

import { Eye, EyeOff } from "lucide-react";

import { Button } from "@/components/ui/button";
import { CardDescription } from "@/components/ui/card";
import { cn } from "@/lib/utils";

import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "../ui/collapsible";

interface ExperienceDescriptionProps {
  description: string;
}

export const ExperienceDescription: React.FC<ExperienceDescriptionProps> = ({ description }) => {
  const [isOpen, setIsOpen] = useState(false);

  const toggleDescription = () => {
    setIsOpen(!isOpen);
  };

  if (description.length < 100) {
    return <CardDescription className="text-foreground">{description}</CardDescription>;
  }

  return (
    <Collapsible className="w-full" onOpenChange={setIsOpen} open={isOpen}>
      {!isOpen && (
        <CardDescription className="text-foreground">{`${description.substring(0, 100)}...`}</CardDescription>
      )}

      <CollapsibleContent>
        <CardDescription className="text-foreground">{description}</CardDescription>
      </CollapsibleContent>

      <CollapsibleTrigger asChild>
        <Button
          className={cn("mt-1.5 inline-flex size-fit items-center gap-1 rounded-md p-1.5 font-normal text-xs/3")}
          onClick={toggleDescription}
          variant={"outline"}
        >
          {!isOpen ? <Eye className="size-3.5" /> : <EyeOff className="size-3.5" />}
          {!isOpen ? "View More" : "View Less"}
        </Button>
      </CollapsibleTrigger>
    </Collapsible>
  );
};

================
File: src/components/experience/experience.tsx
================
import { TracingBeam } from "@/components/ui/tracing-beam";

import { ExperienceCard } from "./experience-card";
import { experiences } from "./experience-config";

export function Experience() {
  return (
    <section className="flex flex-col items-start justify-start gap-4 md:mx-16" data-testid="experience-section">
      <TracingBeam className="flex flex-col">
        <div className="flex flex-col gap-4">
          <h1 className="text-3xl lg:text-4xl" id="experience-section">
            Where I&apos;ve Worked
          </h1>
          {experiences.map((experience, idx) => (
            <ExperienceCard
              company={experience.company}
              date={experience.date}
              description={experience.description}
              employmentType={experience.employmentType}
              image={experience.image}
              index={idx}
              key={`${experience.title}-${idx}`}
              skills={experience.skills}
              title={experience.title}
            />
          ))}
        </div>
      </TracingBeam>
    </section>
  );
}

================
File: src/components/projects/github-repository-hover-card.tsx
================
"use client";

import { useMemo, useState } from "react";

import { AnimatePresence, motion } from "framer-motion";
import { Star } from "lucide-react";
import Link from "next/link";

import { RenderIf } from "@/components/common/render-if";
import { CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface GitHubRepositoryHoverCardProps {
  className?: string;
  items: GithubRepo[];
}

export const GitHubRepositoryHoverCard: React.FC<GitHubRepositoryHoverCardProps> = ({ className, items }) => {
  const [hoveredIndex, setHoveredIndex] = useState<null | number>(null);

  const gridLayoutClass = useMemo(() => {
    const length = items.length;
    if (length === 3 || length === 6) {
      return "lg:grid-cols-3";
    } else {
      return "lg:grid-cols-2";
    }
  }, [items.length]);

  return (
    <div className={cn("grid grid-cols-1 md:grid-cols-2", gridLayoutClass, className)}>
      {items.map((item, idx) => (
        <Link
          className="group relative block size-full p-2"
          href={item.link}
          key={item.link}
          onMouseEnter={() => setHoveredIndex(idx)}
          onMouseLeave={() => setHoveredIndex(null)}
        >
          <AnimatePresence>
            {hoveredIndex === idx && (
              <motion.span
                animate={{
                  opacity: 1,
                  transition: { duration: 0.15 },
                }}
                className="absolute inset-0 block size-full rounded-lg bg-card-foreground text-card-foreground shadow-sm"
                exit={{ opacity: 0, transition: { delay: 0.2, duration: 0.15 } }}
                initial={{ opacity: 0 }}
                layoutId="hoverBackground"
              />
            )}
          </AnimatePresence>
          <Card>
            <CardHeader className="p-0">
              <CardTitle className="font-heading text-xl md:text-2xl">
                <h2>{item.repo}</h2>
              </CardTitle>
            </CardHeader>

            <CardContent className="p-0">
              <CardDescription>
                <RenderIf fallback={item.description} when={item.description.length > 100}>
                  {`${item.description.substring(0, 100)}...`}
                </RenderIf>
              </CardDescription>
            </CardContent>

            <CardFooter className="p-0">
              <CardDescription className="flex items-center gap-1 text-sm/normal">
                <Star className="size-3 md:size-4" />
                {item.stars}
              </CardDescription>
            </CardFooter>
          </Card>
        </Link>
      ))}
    </div>
  );
};

export const Card = ({ children, className }: { children: React.ReactNode; className?: string }) => {
  return (
    <div className={cn("relative z-20 size-full rounded-md bg-card text-card-foreground shadow-sm", className)}>
      <div className="relative z-50">
        <div className="flex flex-col space-y-1 p-3.5">{children}</div>
      </div>
    </div>
  );
};

================
File: src/components/projects/projects.tsx
================
import Link from "next/link";

import { siteConfig } from "@/config/site";

import { GitHubRepositoryHoverCard } from "./github-repository-hover-card";

interface ProjectsProps {
  repositories: GithubRepo[];
}

export const Projects: React.FC<ProjectsProps> = ({ repositories }) => {
  return (
    <section className="md:space-y-4" data-testid="project-section">
      <h2 className="text-3xl lg:text-4xl" id="projects-section">
        Projects
      </h2>
      <GitHubRepositoryHoverCard items={repositories} />
      <Link className="mt-2 flex justify-end text-sm underline" href={siteConfig.links.githubRepositories}>
        See More...
      </Link>
    </section>
  );
};

================
File: src/components/ui/alert.tsx
================
import * as React from "react";

import { type VariantProps, cva } from "class-variance-authority";

import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:top-4 [&>svg]:left-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    defaultVariants: {
      variant: "default",
    },
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive: "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
  },
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div className={cn(alertVariants({ variant }), className)} ref={ref} role="alert" {...props} />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h5 className={cn("mb-1 font-medium leading-none tracking-tight", className)} ref={ref} {...props} />
  ),
);
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <div className={cn("text-sm [&_p]:leading-relaxed", className)} ref={ref} {...props} />
  ),
);
AlertDescription.displayName = "AlertDescription";

export { Alert, AlertDescription, AlertTitle };

================
File: src/components/ui/aurora-background.tsx
================
"use client";

import type React from "react";
import type { ReactNode } from "react";

import { cn } from "@/lib/utils";

interface AuroraBackgroundProps extends React.HTMLProps<HTMLDivElement> {
  children: ReactNode;
  showRadialGradient?: boolean;
}

export const AuroraBackground = ({
  children,
  className,
  showRadialGradient = true,
  ...props
}: AuroraBackgroundProps) => {
  return (
    <div className={cn("relative flex flex-col items-center justify-center transition-bg", className)} {...props}>
      <div className="absolute inset-0 overflow-hidden">
        <div
          className={cn(
            `-inset-[10px] pointer-events-none absolute opacity-50 blur-[10px] invert filter will-change-transform [--aurora:repeating-linear-gradient(100deg,var(--blue-500)_10%,var(--indigo-300)_15%,var(--blue-300)_20%,var(--violet-200)_25%,var(--blue-400)_30%)] [--dark-gradient:repeating-linear-gradient(100deg,var(--black)_0%,var(--black)_7%,var(--transparent)_10%,var(--transparent)_12%,var(--black)_16%)] [--white-gradient:repeating-linear-gradient(100deg,var(--white)_0%,var(--white)_7%,var(--transparent)_10%,var(--transparent)_12%,var(--white)_16%)] [background-image:var(--white-gradient),var(--aurora)] [background-position:50%_50%,50%_50%] [background-size:300%,_200%] after:absolute after:inset-0 after:animate-aurora after:mix-blend-difference after:content-[""] dark:invert-0 after:[background-attachment:fixed] after:[background-image:var(--white-gradient),var(--aurora)] after:[background-size:200%,_100%] dark:[background-image:var(--dark-gradient),var(--aurora)] after:dark:[background-image:var(--dark-gradient),var(--aurora)]`,

            showRadialGradient && "[mask-image:radial-gradient(ellipse_at_100%_0%,black_10%,var(--transparent)_70%)]",
          )}
        />
      </div>
      {children}
    </div>
  );
};

================
File: src/components/ui/avatar.tsx
================
"use client";

import * as React from "react";

import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    ref={ref}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image className={cn("aspect-square h-full w-full", className)} ref={ref} {...props} />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    className={cn("flex h-full w-full items-center justify-center rounded-full bg-muted", className)}
    ref={ref}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarFallback, AvatarImage };

================
File: src/components/ui/badge.tsx
================
import type * as React from "react";

import { type VariantProps, cva } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 font-semibold text-xs transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    defaultVariants: {
      variant: "default",
    },
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
      },
    },
  },
);

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;
}

export { Badge, badgeVariants };

================
File: src/components/ui/button.tsx
================
import * as React from "react";

import { Slot } from "@radix-ui/react-slot";
import { type VariantProps, cva } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md font-medium text-sm ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    defaultVariants: {
      size: "default",
      variant: "default",
    },
    variants: {
      size: {
        default: "h-10 px-4 py-2",
        icon: "size-10",
        lg: "h-11 rounded-md px-8",
        sm: "h-9 rounded-md px-3",
      },
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
      },
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ asChild = false, className, size, variant, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return <Comp className={cn(buttonVariants({ className, size, variant }))} ref={ref} {...props} />;
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };

================
File: src/components/ui/card.tsx
================
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)} ref={ref} {...props} />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div className={cn("flex flex-col space-y-1.5 p-6", className)} ref={ref} {...props} />
  ),
);
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <div className={cn("font-semibold text-2xl leading-none tracking-tight", className)} ref={ref} {...props} />
  ),
);
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <div
      className={cn("text-pretty font-light text-muted text-sm/relaxed md:text-base/relaxed", className)}
      ref={ref}
      {...props}
    />
  ),
);
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => <div className={cn("p-6 pt-0", className)} ref={ref} {...props} />,
);
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div className={cn("flex items-center p-6 pt-0", className)} ref={ref} {...props} />
  ),
);
CardFooter.displayName = "CardFooter";

export { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle };

================
File: src/components/ui/collapsible.tsx
================
"use client";

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible";

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;

export { Collapsible, CollapsibleContent, CollapsibleTrigger };

================
File: src/components/ui/dropdown-menu.tsx
================
"use client";

import * as React from "react";

import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  {
    inset?: boolean;
  } & React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger>
>(({ children, className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className,
    )}
    ref={ref}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto size-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    className={cn(
      "data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=closed]:animate-out data-[state=open]:animate-in",
      className,
    )}
    ref={ref}
    {...props}
  />
));
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      className={cn(
        "data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=closed]:animate-out data-[state=open]:animate-in",
        className,
      )}
      ref={ref}
      sideOffset={sideOffset}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  {
    inset?: boolean;
  } & React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item>
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    ref={ref}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ checked, children, className, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    checked={checked}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pr-2 pl-8 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    ref={ref}
    {...props}
  >
    <span className="absolute left-2 flex size-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="size-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ children, className, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pr-2 pl-8 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    ref={ref}
    {...props}
  >
    <span className="absolute left-2 flex size-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="size-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  {
    inset?: boolean;
  } & React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label>
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    className={cn("px-2 py-1.5 font-semibold text-sm", inset && "pl-8", className)}
    ref={ref}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator className={cn("-mx-1 my-1 h-px bg-muted", className)} ref={ref} {...props} />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest opacity-60", className)} {...props} />;
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuPortal,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
};

================
File: src/components/ui/icons.tsx
================
type IconProps = React.HTMLAttributes<SVGElement>;

export const Icons = {
  apple: (props: IconProps) => (
    <svg aria-label="apple-icon" role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701"
        fill="currentColor"
      />
    </svg>
  ),
  aria: (props: IconProps) => (
    <svg aria-label="aria-icon" fill="currentColor" role="img" viewBox="0 0 24 24" {...props}>
      <path d="M13.966 22.624l-1.69-4.281H8.122l3.892-9.144 5.662 13.425zM8.884 1.376H0v21.248zm15.116 0h-8.884L24 22.624Z" />
    </svg>
  ),
  discord: (props: IconProps) => (
    <svg
      aria-label="discord-icon"
      role="img"
      fill="currentColor"
      height="16"
      viewBox="0 0 16 16"
      width="16"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="M13.545 2.907a13.2 13.2 0 0 0-3.257-1.011.05.05 0 0 0-.052.025c-.141.25-.297.577-.406.833a12.2 12.2 0 0 0-3.658 0 8 8 0 0 0-.412-.833.05.05 0 0 0-.052-.025c-1.125.194-2.22.534-3.257 1.011a.04.04 0 0 0-.021.018C.356 6.024-.213 9.047.066 12.032q.003.022.021.037a13.3 13.3 0 0 0 3.995 2.02.05.05 0 0 0 .056-.019q.463-.63.818-1.329a.05.05 0 0 0-.01-.059l-.018-.011a9 9 0 0 1-1.248-.595.05.05 0 0 1-.02-.066l.015-.019q.127-.095.248-.195a.05.05 0 0 1 .051-.007c2.619 1.196 5.454 1.196 8.041 0a.05.05 0 0 1 .053.007q.121.1.248.195a.05.05 0 0 1-.004.085 8 8 0 0 1-1.249.594.05.05 0 0 0-.03.03.05.05 0 0 0 .003.041c.24.465.515.909.817 1.329a.05.05 0 0 0 .056.019 13.2 13.2 0 0 0 4.001-2.02.05.05 0 0 0 .021-.037c.334-3.451-.559-6.449-2.366-9.106a.03.03 0 0 0-.02-.019m-8.198 7.307c-.789 0-1.438-.724-1.438-1.612s.637-1.613 1.438-1.613c.807 0 1.45.73 1.438 1.613 0 .888-.637 1.612-1.438 1.612m5.316 0c-.788 0-1.438-.724-1.438-1.612s.637-1.613 1.438-1.613c.807 0 1.451.73 1.438 1.613 0 .888-.631 1.612-1.438 1.612" />
    </svg>
  ),
  gitHub: (props: IconProps) => (
    <svg role="img" aria-label="github-icon" viewBox="0 0 438.549 438.549" {...props}>
      <path
        d="M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z"
        fill="currentColor"
      />
    </svg>
  ),
  google: (props: IconProps) => (
    <svg aria-label="google-icon" role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z"
        fill="currentColor"
      />
    </svg>
  ),
  linkedIn: (props: IconProps) => (
    <svg
      aria-label="linkedIn-icon"
      role="img"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
    </svg>
  ),
  npm: (props: IconProps) => (
    <svg aria-label="npm-icon" role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M1.763 0C.786 0 0 .786 0 1.763v20.474C0 23.214.786 24 1.763 24h20.474c.977 0 1.763-.786 1.763-1.763V1.763C24 .786 23.214 0 22.237 0zM5.13 5.323l13.837.019-.009 13.836h-3.464l.01-10.382h-3.456L12.04 19.17H5.113z"
        fill="currentColor"
      />
    </svg>
  ),
  paypal: (props: IconProps) => (
    <svg aria-label="paypal-icon" role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M7.076 21.337H2.47a.641.641 0 0 1-.633-.74L4.944.901C5.026.382 5.474 0 5.998 0h7.46c2.57 0 4.578.543 5.69 1.81 1.01 1.15 1.304 2.42 1.012 4.287-.023.143-.047.288-.077.437-.983 5.05-4.349 6.797-8.647 6.797h-2.19c-.524 0-.968.382-1.05.9l-1.12 7.106zm14.146-14.42a3.35 3.35 0 0 0-.607-.541c-.013.076-.026.175-.041.254-.93 4.778-4.005 7.201-9.138 7.201h-2.19a.563.563 0 0 0-.556.479l-1.187 7.527h-.506l-.24 1.516a.56.56 0 0 0 .554.647h3.882c.46 0 .85-.334.922-.788.06-.26.76-4.852.816-5.09a.932.932 0 0 1 .923-.788h.58c3.76 0 6.705-1.528 7.565-5.946.36-1.847.174-3.388-.777-4.471z"
        fill="currentColor"
      />
    </svg>
  ),
  pnpm: (props: IconProps) => (
    <svg aria-label="pnpm-icon" role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M0 0v7.5h7.5V0zm8.25 0v7.5h7.498V0zm8.25 0v7.5H24V0zM8.25 8.25v7.5h7.498v-7.5zm8.25 0v7.5H24v-7.5zM0 16.5V24h7.5v-7.5zm8.25 0V24h7.498v-7.5zm8.25 0V24H24v-7.5z"
        fill="currentColor"
      />
    </svg>
  ),
  radix: (props: IconProps) => (
    <svg aria-label="radix-icon" role="img" fill="none" viewBox="0 0 25 25" {...props}>
      <path d="M12 25C7.58173 25 4 21.4183 4 17C4 12.5817 7.58173 9 12 9V25Z" fill="currentcolor" />
      <path d="M12 0H4V8H12V0Z" fill="currentcolor" />
      <path
        d="M17 8C19.2091 8 21 6.20914 21 4C21 1.79086 19.2091 0 17 0C14.7909 0 13 1.79086 13 4C13 6.20914 14.7909 8 17 8Z"
        fill="currentcolor"
      />
    </svg>
  ),
  react: (props: IconProps) => (
    <svg aria-label="react-icon" role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z"
        fill="currentColor"
      />
    </svg>
  ),
  spinner: (props: IconProps) => (
    <svg
      aria-label="spinner-icon"
      role="img"
      fill="none"
      height="24"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
      viewBox="0 0 24 24"
      width="24"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="M21 12a9 9 0 1 1-6.219-8.56" />
    </svg>
  ),
  tailwind: (props: IconProps) => (
    <svg aria-label="tailwind-icon" role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M12.001,4.8c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 C13.666,10.618,15.027,12,18.001,12c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C16.337,6.182,14.976,4.8,12.001,4.8z M6.001,12c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 c1.177,1.194,2.538,2.576,5.512,2.576c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C10.337,13.382,8.976,12,6.001,12z"
        fill="currentColor"
      />
    </svg>
  ),
  twitter: (props: IconProps) => (
    <svg
      aria-label="twitter-icon"
      role="img"
      height="23"
      viewBox="0 0 1200 1227"
      width="23"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z" />
    </svg>
  ),
  yarn: (props: IconProps) => (
    <svg aria-label="yarn-icon" role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M12 0C5.375 0 0 5.375 0 12s5.375 12 12 12 12-5.375 12-12S18.625 0 12 0zm.768 4.105c.183 0 .363.053.525.157.125.083.287.185.755 1.154.31-.088.468-.042.551-.019.204.056.366.19.463.375.477.917.542 2.553.334 3.605-.241 1.232-.755 2.029-1.131 2.576.324.329.778.899 1.117 1.825.278.774.31 1.478.273 2.015a5.51 5.51 0 0 0 .602-.329c.593-.366 1.487-.917 2.553-.931.714-.009 1.269.445 1.353 1.103a1.23 1.23 0 0 1-.945 1.362c-.649.158-.95.278-1.821.843-1.232.797-2.539 1.242-3.012 1.39a1.686 1.686 0 0 1-.704.343c-.737.181-3.266.315-3.466.315h-.046c-.783 0-1.214-.241-1.45-.491-.658.329-1.51.19-2.122-.134a1.078 1.078 0 0 1-.58-1.153 1.243 1.243 0 0 1-.153-.195c-.162-.25-.528-.936-.454-1.946.056-.723.556-1.367.88-1.71a5.522 5.522 0 0 1 .408-2.256c.306-.727.885-1.348 1.32-1.737-.32-.537-.644-1.367-.329-2.21.227-.602.412-.936.82-1.08h-.005c.199-.074.389-.153.486-.259a3.418 3.418 0 0 1 2.298-1.103c.037-.093.079-.185.125-.283.31-.658.639-1.029 1.024-1.168a.94.94 0 0 1 .328-.06zm.006.7c-.507.016-1.001 1.519-1.001 1.519s-1.27-.204-2.266.871c-.199.218-.468.334-.746.44-.079.028-.176.023-.417.672-.371.991.625 2.094.625 2.094s-1.186.839-1.626 1.881c-.486 1.144-.338 2.261-.338 2.261s-.843.732-.899 1.487c-.051.663.139 1.2.343 1.515.227.343.51.176.51.176s-.561.653-.037.931c.477.25 1.283.394 1.71-.037.31-.31.371-1.001.486-1.283.028-.065.12.111.209.199.097.093.264.195.264.195s-.755.324-.445 1.066c.102.246.468.403 1.066.398.222-.005 2.664-.139 3.313-.296.375-.088.505-.283.505-.283s1.566-.431 2.998-1.357c.917-.598 1.293-.76 2.034-.936.612-.148.57-1.098-.241-1.084-.839.009-1.575.44-2.196.825-1.163.718-1.742.672-1.742.672l-.018-.032c-.079-.13.371-1.293-.134-2.678-.547-1.515-1.413-1.881-1.344-1.997.297-.5 1.038-1.297 1.334-2.78.176-.899.13-2.377-.269-3.151-.074-.144-.732.241-.732.241s-.616-1.371-.788-1.483a.271.271 0 0 0-.157-.046z"
        fill="currentColor"
      />
    </svg>
  ),
};

================
File: src/components/ui/mode-toggle.tsx
================
"use client";

import type React from "react";
import { useCallback } from "react";

import type { DropdownMenuTriggerProps } from "@radix-ui/react-dropdown-menu";
import { MoonIcon, SunIcon } from "lucide-react";
import { useTheme } from "next-themes";

import { Button, type ButtonProps } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { cn } from "@/lib/utils";

export const ModeToggleButton: React.FC<DropdownMenuTriggerProps> = ({ className, ...props }) => {
  const { setTheme } = useTheme();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger {...props} asChild>
        <Button className={cn(className)} size="icon" variant="ghost">
          <SunIcon className="dark:-rotate-90 size-[1.2rem] rotate-0 scale-100 transition-all dark:scale-0" />
          <MoonIcon className="absolute size-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>Light</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>Dark</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>System</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const MobileModeToggleButton: React.FC<ButtonProps> = ({ className, ...props }) => {
  const { setTheme, theme } = useTheme();
  const toggleTheme = useCallback(() => {
    setTheme(theme === "light" ? "dark" : "light");
  }, [theme, setTheme]);

  return (
    <Button {...props} className={cn("space-x-2", className)} onClick={toggleTheme} variant="outline">
      <span>Appearance</span>
      {theme === "light" ? <SunIcon size={18} /> : <MoonIcon size={18} />}
    </Button>
  );
};

================
File: src/components/ui/page-header.tsx
================
import { cn } from "@/lib/utils";

function PageHeader({ children, className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <section className={cn("mx-auto flex max-w-4xl flex-col items-center py-0 lg:m-auto", className)} {...props}>
      {children}
    </section>
  );
}

function PageHeaderHeading({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {
  return <h1 className={cn("text-center text-3xl md:text-6xl lg:leading-[1.1]", className)} {...props} />;
}

function PageHeaderDescription({ className, ...props }: React.HTMLAttributes<HTMLParagraphElement>) {
  return (
    <div
      className={cn("text-pretty font-light text-muted text-sm/relaxed md:text-base/relaxed", className)}
      {...props}
    />
  );
}

function PageActions({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return <div className={cn("inline-flex space-x-4 py-4 md:pb-10", className)} {...props} />;
}

export { PageActions, PageHeader, PageHeaderDescription, PageHeaderHeading };

================
File: src/components/ui/reveal.tsx
================
"use client";

import { useEffect, useRef } from "react";

import { type HTMLMotionProps, motion, useAnimation, useInView } from "framer-motion";

import { cn } from "@/lib/utils";

interface RevealProps extends HTMLMotionProps<"div"> {
  children: React.ReactNode;
}

export const Reveal = ({ children, className, ...props }: RevealProps) => {
  const controls = useAnimation();
  const ref = useRef<HTMLDivElement>(null);
  const isInView = useInView(ref);

  useEffect(() => {
    if (isInView) {
      controls.start("visible");
    }
  }, [controls, isInView]);

  return (
    <motion.div
      animate={controls}
      className={cn(className)}
      initial="hidden"
      ref={ref}
      transition={{ duration: 0.3 }}
      variants={{
        hidden: { opacity: 0, scale: 0 },
        visible: { opacity: 1, scale: 1 },
      }}
      {...props}
    >
      {children}
    </motion.div>
  );
};

================
File: src/components/ui/section-layout.tsx
================
import React, { type ReactNode } from "react";

import { Separator } from "@/components/ui/separator";
import { cn } from "@/lib/utils";

interface SectionLayoutProps extends React.HTMLAttributes<HTMLDivElement> {
  children: ReactNode[];
}

export const SectionLayout: React.FC<SectionLayoutProps> = ({ children, className, ...rest }) => {
  return (
    <div className={cn(className)} {...rest}>
      {children.map((child, index) => (
        <React.Fragment key={`${child?.toLocaleString()}-${index}`}>
          <Separator />
          {child}
        </React.Fragment>
      ))}
    </div>
  );
};

================
File: src/components/ui/separator.tsx
================
"use client";

import * as React from "react";

import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(({ className, decorative = true, orientation = "horizontal", ...props }, ref) => (
  <SeparatorPrimitive.Root
    className={cn("shrink-0 bg-border", orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]", className)}
    decorative={decorative}
    orientation={orientation}
    ref={ref}
    {...props}
  />
));
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };

================
File: src/components/ui/sheet.tsx
================
"use client";

import * as React from "react";

import * as SheetPrimitive from "@radix-ui/react-dialog";
import { type VariantProps, cva } from "class-variance-authority";
import { X } from "lucide-react";

import { buttonVariants } from "@/components/ui/button";
import { cn } from "@/lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80 data-[state=closed]:animate-out data-[state=open]:animate-in",
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:animate-out data-[state=open]:animate-in data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    defaultVariants: {
      side: "right",
    },
    variants: {
      side: {
        bottom:
          "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 border-t",
        left: "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
        right:
          "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
        top: "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 border-b",
      },
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<React.ElementRef<typeof SheetPrimitive.Content>, SheetContentProps>(
  ({ children, className, side = "right", ...props }, ref) => (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content className={cn(sheetVariants({ side }), className)} ref={ref} {...props}>
        {children}

        <SheetPrimitive.Close
          className={cn(buttonVariants({ size: "icon", variant: "outline" }), "absolute top-4 right-4")}
        >
          <X className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  ),
);
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-2 text-center sm:text-left", className)} {...props} />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title className={cn("font-semibold text-foreground text-lg", className)} ref={ref} {...props} />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description className={cn("text-muted-foreground text-sm", className)} ref={ref} {...props} />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetClose,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader,
  SheetOverlay,
  SheetPortal,
  SheetTitle,
  SheetTrigger,
};

================
File: src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils";

function Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return <div className={cn("animate-pulse rounded-md bg-muted", className)} {...props} />;
}

export { Skeleton };

================
File: src/components/ui/tooltip.tsx
================
"use client";

import * as React from "react";

import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    className={cn(
      "fade-in-0 zoom-in-95 data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 animate-in overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-popover-foreground text-sm shadow-md data-[state=closed]:animate-out",
      className,
    )}
    ref={ref}
    sideOffset={sideOffset}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger };

================
File: src/components/ui/tracing-beam.tsx
================
"use client";

import React, { useEffect, useRef, useState } from "react";

import { motion, useScroll, useSpring, useTransform, useVelocity } from "framer-motion";

import { cn, fullConfig } from "@/lib/utils";

export const TracingBeam = ({ children, className }: { children: React.ReactNode; className?: string }) => {
  const ref = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useScroll({
    offset: ["start start", "end start"],
    target: ref,
  });

  // track velocity of scroll to increase or decrease distance between svg gradient y coordinates.
  const scrollYProgressVelocity = useVelocity(scrollYProgress);
  const [, setVelocity] = React.useState(0);

  const contentRef = useRef<HTMLDivElement>(null);

  const [svgHeight, setSvgHeight] = useState(0);

  useEffect(() => {
    const handleResize = () => {
      if (contentRef.current) {
        const newHeight = contentRef.current.offsetHeight;

        // Define minimum and maximum allowed heights
        const minHeight = 0; // Set this to whatever is appropriate for your layout
        const maxHeight = 2900; // Set this to whatever is appropriate for your layout

        // Constrain newHeight to be within minHeight and maxHeight
        const constrainedHeight = Math.max(minHeight, Math.min(newHeight, maxHeight));
        setSvgHeight(constrainedHeight);
      }
    };
    window.addEventListener("resize", handleResize);

    // Set initial SVG Height
    handleResize();

    return () => window.removeEventListener("resize", handleResize);
  }, []);

  useEffect(() => {
    return scrollYProgress.on("change", setVelocity);
  }, [scrollYProgress]);

  const y1 = useSpring(useTransform(scrollYProgress, [0, 0.8], [50, svgHeight]), {
    damping: 90,
    stiffness: 500,
  });
  const y2 = useSpring(useTransform(scrollYProgress, [0, 0.3], [50, svgHeight - 200]), {
    damping: 90,
    stiffness: 500,
  });

  return (
    <motion.div className={cn("relative mx-auto h-full w-full max-w-4xl", className)} ref={ref}>
      <div className="-left-4 md:-left-20 absolute top-3 hidden md:inline-block">
        <motion.div
          animate={{
            boxShadow: scrollYProgress.get() > 0 ? "none" : "rgba(0, 0, 0, 0.24) 0px 3px 8px",
          }}
          className="ml-[27px] flex size-4 items-center justify-center rounded-full border border-neutral-200 shadow-sm"
          transition={{ delay: 0.5, duration: 0.2 }}
        >
          <motion.div
            animate={{
              backgroundColor:
                scrollYProgress.get() > 0
                  ? fullConfig.theme.colors.foreground
                  : fullConfig.theme.colors.primary.DEFAULT,
              borderColor:
                scrollYProgress.get() > 0
                  ? fullConfig.theme.colors.foreground
                  : fullConfig.theme.colors.primary.DEFAULT,
            }}
            className="size-2 rounded-full border border-neutral-300 bg-white"
            transition={{ delay: 0.5, duration: 0.2 }}
          />
        </motion.div>
        <svg
          aria-hidden="true"
          className="ml-4 block"
          height={svgHeight} // Set the SVG height
          viewBox={`0 0 20 ${svgHeight}`}
          width="20"
        >
          <motion.path
            d={`M 1 0V -36 l 18 24 V ${svgHeight * 0.8} l -18 24V ${svgHeight}`}
            fill="none"
            stroke="#9091A0"
            strokeOpacity="0.16"
            transition={{
              duration: 10,
            }}
          />
          <motion.path
            className="motion-reduce:hidden"
            d={`M 1 0V -36 l 18 24 V ${svgHeight * 0.8} l -18 24V ${svgHeight}`}
            fill="none"
            stroke="url(#gradient)"
            strokeWidth="1.25"
            transition={{
              duration: 10,
            }}
          />
          <defs>
            <motion.linearGradient
              gradientUnits="userSpaceOnUse"
              id="gradient"
              x1="0"
              x2="0"
              y1={y1} // set y1 for gradient
              y2={y2} // set y2 for gradient
            >
              <stop stopColor={fullConfig.theme.colors.primary.DEFAULT} stopOpacity="0" />
              <stop stopColor={fullConfig.theme.colors.primary.DEFAULT} />
              <stop offset="0.325" stopColor={fullConfig.theme.colors.primary.DEFAULT} />
              <stop offset="1" stopColor={fullConfig.theme.colors.primary.DEFAULT} stopOpacity="0" />
            </motion.linearGradient>
          </defs>
        </svg>
      </div>
      <div ref={contentRef}>{children}</div>
    </motion.div>
  );
};

================
File: src/components/ui/typewriter-effect.tsx
================
"use client";

import { Typewriter, type TypewriterProps } from "react-simple-typewriter";

export const TypewriterEffect = (props: TypewriterProps) => {
  return <Typewriter cursor cursorBlinking delaySpeed={1000} deleteSpeed={50} loop={0} typeSpeed={100} {...props} />;
};

================
File: src/components/about.tsx
================
import { CardDescription } from "@/components/ui/card";
import { Reveal } from "@/components/ui/reveal";

export function About() {
  return (
    <section className="container space-y-4" data-testid="about-section">
      <h2 className="text-3xl lg:text-4xl" id="about-section">
        About Me
      </h2>
      <Reveal
        transition={{ duration: 0.4 }}
        variants={{
          hidden: { opacity: 0, x: 50 },
          visible: { opacity: 1, x: 0 },
        }}
      >
        <CardDescription className="space-y-4 text-foreground">
          <p>Hi 👋 I&apos;m a software engineer, gamer, soccer player, and minimalist based in Dallas, Texas.</p>
          <p>
            As a first-generation Mexican-American, I strive to succeed and push my legacy forward through my work and
            personal projects.
          </p>
          <blockquote className="mb-4 border-l-2 pl-6 italic">
            &quot;<span className="text-primary">échele con ganas</span>&quot; - a constant reminder to give my all
          </blockquote>
          <p>
            I developed things as a Full-Stack Software Engineer at Tesla. Previously, I worked as a Frontend Software
            Engineer Intern at Tesla, Backend Software Engineer Intern at JPMorgan Chase & Co., and a Software Engineer
            Intern at SEO.
          </p>
        </CardDescription>
      </Reveal>
    </section>
  );
}

================
File: src/components/hero-section.tsx
================
import Image from "next/image";
import Link from "next/link";

import { buttonVariants } from "@/components/ui/button";
import { Icons } from "@/components/ui/icons";
import { PageActions, PageHeader, PageHeaderDescription, PageHeaderHeading } from "@/components/ui/page-header";
import { TypewriterEffect } from "@/components/ui/typewriter-effect";
import { siteConfig } from "@/config/site";
import { cn } from "@/lib/utils";

interface HeroSectionProps {
  className?: string;
}

export function HeroSection({ className }: HeroSectionProps) {
  const words = [
    "hey there!",
    "nice to meet you.",
    "my name is edwin.",
    "i am a computer engineer.",
    "i love sipping coffee.",
    "i also love to build apps!",
    "thanks for visiting!",
  ];
  return (
    <section className={cn("py-0", className)} data-testid="hero-section">
      <div className={cn("grid min-h-[calc(100vh-4rem)] grid-cols-1 lg:grid-cols-2")}>
        <Image
          alt="Picture of the author"
          className="m-auto mb-0 h-auto w-full max-w-md justify-center object-cover object-center lg:m-auto lg:max-w-xl"
          draggable={false}
          height={1000}
          priority
          src={siteConfig.assets.avatar}
          width={1200}
        />
        <PageHeader>
          <PageHeaderHeading>Edwin Hernandez</PageHeaderHeading>
          <PageHeaderDescription>
            <TypewriterEffect words={words} />
          </PageHeaderDescription>
          <PageActions>
            <a className={cn(buttonVariants())} download href={siteConfig.assets.resume}>
              Download Resume
            </a>
            <Link
              className={cn(buttonVariants({ variant: "outline" }))}
              href={siteConfig.links.github}
              rel="noreferrer"
              target="_blank"
            >
              <Icons.gitHub className="mr-2 size-4" />
              GitHub
            </Link>
          </PageActions>
        </PageHeader>
      </div>
    </section>
  );
}

================
File: src/config/mainNav.ts
================
export const mainNav: NavItem[] = [
  {
    href: "/#about-section",
    title: "About",
  },
  {
    href: "/#experience-section",
    title: "Experience",
  },
  {
    href: "/#projects-section",
    title: "Projects",
  },
  {
    href: "/dashboard",
    title: "Dashboard",
  },
];

================
File: src/config/site.ts
================
export const siteConfig = {
  assets: {
    avatar: "/assets/images/avatar.png",
    discordGif: "/assets/gifs/discord.gif",
    logo: "/assets/images/logo.png",
    resume: "/assets/resume/Edwin-Hernandez-Resume-2024.pdf",
  },
  description: "Software Engineer, gamer, soccer player, and minimalist, based in Dallas, TX.",
  keywords: [
    "Next.js",
    "TypeScript",
    "Tailwind CSS",
    "Vitest",
    "React Testing Library",
    "Framer Motion",
    "shadcn/ui",
    "Aceternity UI",
  ],
  links: {
    github: "https://github.com/edwinhern",
    githubRepo: "https://github.com/edwinhern/portfolio-v2",
    githubRepositories: "https://github.com/edwinhern?tab=repositories",
    linkedin: "https://www.linkedin.com/in/edwinhern/",
  },
  name: "Edwin Hernandez",
  opImage: "/og-image.png",
  siteTitle: "edwinhern",
  url: new URL("https://edwinhern.com"),
};

export type SiteConfig = typeof siteConfig;

================
File: src/lib/api/github.ts
================
import wretch from "wretch";

// Configure API URL from environment
const apiUrl = "https://gh-pinned-repos-tsj7ta5xfhep.deno.dev";
const githubUsername = "edwinhern";

// Create a wretch instance configured for API interactions
const api = wretch(apiUrl, {
  cache: "no-store",
  mode: "cors",
})
  .errorType("json")
  .resolve((resolver) => resolver.json() as Promise<GithubRepo[]>);

// Function to fetch pinned repository
export const fetchGithubRepos = async () => {
  const response = await api.get(`?username=${githubUsername}`);
  return response || [];
};

================
File: src/lib/api/time.ts
================
import wretch from "wretch";

// Configure API URL from environment
const apiUrl = "https://api.sunrise-sunset.org/json?lat=32.780140&lng=-96.800453&formatted=0";

// Create a wretch instance configured for API interactions
const api = wretch(apiUrl, {
  cache: "no-store",
  mode: "cors",
})
  .errorType("json")
  .resolve((resolver) => resolver.json() as Promise<WeatherForecast>);

// Function to fetch pinned repository
export const fetchWeatherForecast = async () => {
  const response = await api.get();
  return response || null;
};

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";
import resolveConfig from "tailwindcss/resolveConfig";

import tailwindConfig from "../../tailwind.config";

/**
 * Combines and merges multiple CSS class names or values using the classix and tailwind-merge libraries.
 * This function takes any number of arguments and passes them to the cx function from classix,
 * which generates a combined class name string. The result is then passed to twMerge from tailwind-merge,
 * which merges any overlapping or duplicate classes into a final single string.
 *
 * @param args - The CSS class names or values to be combined and merged.
 * @returns - A merged string containing the combined CSS class names or values.
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

/**
 * Resolves the Tailwind CSS configuration object using the tailwindcss/resolveConfig library.
 *
 * @param config - The Tailwind CSS configuration object to be resolved.
 * @returns - The resolved Tailwind CSS configuration object.
 */
export const fullConfig = resolveConfig(tailwindConfig);

================
File: src/styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 94%;
    --foreground: 0 0% 5%;
    --card: 0 0% 94%;
    --card-foreground: 0 0% 5%;
    --popover: 0 0% 94%;
    --popover-foreground: 0 0% 5%;
    --primary: 164 92% 48%;
    --primary-foreground: 0 0% 5%;
    --secondary: 0 0% 85%;
    --secondary-foreground: 0 0% 5%;
    --muted: 0 0% 20%;
    --muted-foreground: 0 0% 70%;
    --accent: 0 0% 5%;
    --accent-foreground: 0 0% 94%;
    --destructive: 0 85% 60%;
    --destructive-foreground: 0 0% 5%;
    --border: 0 0% 20%;
    --input: 0 0% 20%;
    --ring: 0 0% 40%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 0 0% 6%;
    --foreground: 0 0% 95%;
    --card: 0 0% 6%;
    --card-foreground: 0 0% 95%;
    --popover: 0 0% 6%;
    --popover-foreground: 0 0% 95%;
    --primary: 164 92% 52%;
    --primary-foreground: 0 0% 6%;
    --secondary: 0 0% 15%;
    --secondary-foreground: 0 0% 95%;
    --muted: 0 0% 80%;
    --muted-foreground: 0 0% 95%;
    --accent: 0 0% 95%;
    --accent-foreground: 0 0% 6%;
    --destructive: 0 62% 30%;
    --destructive-foreground: 0 0% 10%;
    --border: 0 0% 60%;
    --input: 0 0% 80%;
    --ring: 0 0% 60%;
  }
}

@layer base {
  html,
  body {
    @apply bg-background text-foreground;
  }

  html {
    @apply scroll-smooth antialiased;
    text-size-adjust: 100%;
    text-rendering: optimizeLegibility;
  }

  body {
    @apply font-sans text-base;
  }

  h1,
  h2,
  h3 {
    @apply scroll-mt-16 font-heading font-semibold slashed-zero tracking-tight;
  }

  section {
    @apply py-8;
  }

  * {
    @apply border-border;
  }
}

@layer utilities {
  .px-safe {
    padding-left: env(safe-area-inset-left);
    padding-right: env(safe-area-inset-right);
  }

  .bg-dots {
    @apply bg-white bg-[radial-gradient(#e5e7eb_1px,transparent_1px)] [background-size:16px_16px];
  }

  .bg-grid {
    @apply bg-white bg-[linear-gradient(to_right,#80808012_1px,transparent_1px),linear-gradient(to_bottom,#80808012_1px,transparent_1px)] bg-[size:24px_24px];
  }
}

@media (max-width: 640px) {
  .container {
    @apply px-4;
  }
}

================
File: src/types/enum.ts
================
/**
 * @description Enumeration of different employment types.
 **/
export enum EmploymentType {
  Contractor = "Contractor",
  FullTime = "Full-Time",
  Intern = "Intern",
  PartTime = "Part-Time",
}

================
File: src/types/index.d.ts
================
import type { Icons } from "@/components/ui/icons";

declare global {
  /**
   * Represents a repository on GitHub.
   * @description This type is associated with the GitHub pinned repositories endpoint
   **/
  type GithubRepo = {
    description: string;
    forks: number;
    image: string;
    language: string;
    languageColor: string;
    link: string;
    owner: string;
    repo: string;
    stars: number;
    website: string;
  };

  /**
   * Represents weather data for the selected location.
   * @description This type is associated with the sunrise-sunset API
   **/
  type WeatherForecast = {
    results: {
      astronomical_twilight_begin: string;
      astronomical_twilight_end: string;
      civil_twilight_begin: string;
      civil_twilight_end: string;
      day_length: string;
      nautical_twilight_begin: string;
      nautical_twilight_end: string;
      solar_noon: string;
      sunrise: string;
      sunset: string;
    };
    status: string; // OK
    tzid: string; // Timezone (UTC)
  };

  /**
   * @description Represents duration of work experience.
   **/
  type ExperienceDate = {
    end: string;
    start: string;
  };

  /**
   * @description Represents an item in the work experience section.
   **/
  type ExperienceItem = {
    company: string;
    date: ExperienceDate;
    description: string;
    employmentType: EmploymentType;
    image?: string;
    skills?: string[];
    title: string;
  };

  /**
   * @description Represents an item in the navigation menu.
   **/
  type NavItem = {
    disabled?: boolean;
    external?: boolean;
    href: string;
    icon?: keyof typeof Icons;
    label?: string;
    title: string;
  };
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: .nvmrc
================
20.17.0

================
File: biome.json
================
{
  "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
  "formatter": {
    "indentStyle": "space",
    "lineWidth": 120
  },
  "organizeImports": { "enabled": true },
  "linter": {
    "enabled": true,
    "rules": {
      "nursery": {
        "useSortedClasses": {
          "level": "warn",
          "options": {
            "attributes": ["classList"],
            "functions": ["clsx", "cva", "cn"]
          }
        }
      },
      "recommended": true,
      "suspicious": {
        "noExplicitAny": "off",
        "noConfusingVoidType": "off"
      },
      "style": {
        "noUselessElse": "off",
        "noNonNullAssertion": "off"
      },
      "complexity": {
        "noForEach": "off"
      }
    },
    "ignore": ["**/.next", "**/node_modules"]
  }
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/styles/globals.css",
    "baseColor": "stone",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

================
File: Dockerfile
================
# Build stage
FROM node:20-alpine AS builder
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

WORKDIR /app

# Copy package.json and pnpm-lock.yaml
COPY package.json pnpm-lock.yaml* ./

# Install dependencies (including devDependencies)
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile

# Copy all files
COPY . .

# Build the application
RUN pnpm run build

# Production stage
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy necessary files from the builder stage
COPY --from=builder /app/next.config.mjs ./
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Set correct permissions for the .next directory
RUN chown nextjs:nodejs .next

# Switch to nextjs user
USER nextjs

# Create cache directory with correct permissions
RUN mkdir -p .next/cache

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

CMD ["node", "server.js"]

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: "standalone",
  experimental: {
    optimizePackageImports: ["framer-motion"],
    webVitalsAttribution: ["FCP", "LCP", "CLS", "FID", "TTFB", "INP"],
  },
  images: {
    deviceSizes: [390, 435, 768, 1024, 1280],
    formats: ["image/avif"],
    remotePatterns: [
      { hostname: "cdn.discordapp.com" },
      { hostname: "media.discordapp.net" },
      { hostname: "dcdn.dstn.to" },
    ],
  },
  reactStrictMode: true,
  trailingSlash: false,
};

export default nextConfig;

================
File: package.json
================
{
  "name": "edwin-portfolio-v2",
  "version": "0.6.18",
  "description": "My personal portfolio website, version 2.0",
  "author": "Edwin Hernandez",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "biome check src/",
    "lint:fix": "biome check --fix --unsafe",
    "format": "biome format src/",
    "prepare": "husky"
  },
  "dependencies": {
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-collapsible": "^1.0.3",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-separator": "^1.0.3",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-tooltip": "^1.0.7",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "date-fns": "^4.0.0",
    "framer-motion": "^11.0.28",
    "lucide-react": "^0.441.0",
    "next": "15.0.1",
    "next-themes": "^0.3.0",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-simple-typewriter": "^5.0.1",
    "sharp": "^0.33.3",
    "tailwind-merge": "^2.2.2",
    "tailwindcss-animate": "^1.0.7",
    "use-lanyard": "^1.5.2",
    "wretch": "^2.8.1"
  },
  "devDependencies": {
    "@biomejs/biome": "1.9.4",
    "@commitlint/cli": "^19.2.1",
    "@commitlint/config-conventional": "^19.1.0",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@vercel/analytics": "^1.3.1",
    "@vercel/speed-insights": "^1.0.12",
    "autoprefixer": "^10.4.19",
    "husky": "^9.0.11",
    "lint-staged": "^15.2.2",
    "postcss": "^8",
    "tailwindcss": "^3.4.3",
    "typescript": "^5"
  },
  "commitlint": {
    "extends": ["@commitlint/config-conventional"],
    "formatter": "@commitlint/format"
  },
  "lint-staged": {
    "*.{js,ts,cjs,mjs,d.cts,d.mts,jsx,tsx,json,jsonc}": ["biome check --apply --no-errors-on-unmatched"]
  },
  "packageManager": "pnpm@9.10.0+sha512.73a29afa36a0d092ece5271de5177ecbf8318d454ecd701343131b8ebc0c1a91c487da46ab77c8e596d6acf1461e3594ced4becedf8921b074fbd8653ed7051c"
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    autoprefixer: {},
    tailwindcss: {},
  },
};

================
File: README.md
================
# 🌐 edwinhern.com

[![Build](https://github.com/edwinhern/portfolio-v2/actions/workflows/build.yml/badge.svg?branch=main)](https://github.com/edwinhern/portfolio-v2/actions/workflows/build.yml)
[![Code Quality](https://github.com/edwinhern/portfolio-v2/actions/workflows/code-quality.yml/badge.svg?branch=main)](https://github.com/edwinhern/portfolio-v2/actions/workflows/code-quality.yml)
[![CodeQL](https://github.com/edwinhern/portfolio-v2/actions/workflows/github-code-scanning/codeql/badge.svg?branch=main)](https://github.com/edwinhern/portfolio-v2/actions/workflows/github-code-scanning/codeql)
[![Docker Image CI](https://github.com/edwinhern/portfolio-v2/actions/workflows/docker-image.yml/badge.svg?branch=main)](https://github.com/edwinhern/portfolio-v2/actions/workflows/docker-image.yml)

Welcome to the documentation for edwinhern.com, a portfolio designed to showcase cutting-edge web development technologies and design principles.

## ⚡ Tech Stack & UI Libraries

Here's what powers edwinhern.com, from the framework down to the animation library:

- [Next.js](https://www.nextjs.org/) - The React framework for production 🚀
- [Tailwind CSS](https://tailwindcss.com/) - A utility-first CSS framework 🎨
- [Framer Motion](https://www.framer.com/motion/) - A library to power animations 💫
- [shadcn/ui](https://ui.shadcn.com/) - Reusable React components 🛠
- [Aceternity UI](https://ui.aceternity.com/) - A modern UI kit for rapid development 🌈

## 🌟 Useful Links

Explore these tools to further enhance your development workflow:

- [Realtime Colors](https://www.realtimecolors.com) - Elevate your design with modern fonts and a dynamic color palette generator.
  - Color Schema I used - <https://www.realtimecolors.com/?colors=F1F1F1-0F0F0F-F1F1F1-272727-15F5BA&fonts=Roboto-Roboto>
- [Meta Tags](https://metatags.io) - Debug and generate meta tag code for any website
- [Favicon.io](https://favicon.io/favicon-converter/) - Quickly generate variety of favicon sizes
- [Open Graph Generator](https://imgsrc.io/) - Generate beautiful Open Graph images with zero effort.
- [Open Graph Debugger](https://imgsrc.io/tools/open-graph-debugger) - Preview how your Open Graph images will be rendered on social media platforms.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";
const { default: flattenColorPalette } = require("tailwindcss/lib/util/flattenColorPalette");

const config = {
  content: ["src/app/**/*.{js,ts,jsx,tsx,mdx,json}", "src/components/**/*.{js,ts,jsx,tsx,mdx,json}"],
  darkMode: ["selector"],
  plugins: [require("tailwindcss-animate"), addVariablesForColors],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        aurora: "aurora 60s linear infinite",
        reveal: "reveal 0.7s ease-in-out",
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      colors: {
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        background: "hsl(var(--background))",
        border: "hsl(var(--border))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        foreground: "hsl(var(--foreground))",
        input: "hsl(var(--input))",
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        ring: "hsl(var(--ring))",
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
      },
      fontFamily: {
        heading: "var(--heading-font)",
      },
      fontSize: {
        "2xl": "1.563rem",
        "3xl": "1.954rem",
        "4xl": "2.442rem",
        "5xl": "3.053rem",
        base: "1rem",
        sm: "0.800rem",
        xl: "1.250rem",
      },
      fontWeight: {
        bold: "700",
        normal: "400",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        aurora: {
          from: {
            backgroundPosition: "50% 50%, 50% 50%",
          },
          to: {
            backgroundPosition: "350% 50%, 350% 50%",
          },
        },
        reveal: {
          "0%": { filter: "brightness(1) blur(15px)", opacity: "0", scale: "1.0125" },
          "10%": { filter: "brightness(1.25) blur(10px)", opacity: "1" },
          "100%": { filter: "brightness(1) blur(0)", opacity: "1", scale: "1" },
        },
      },
      lineHeight: {
        slacker: "1.75",
      },
    },
  },
} satisfies Config;

export default config;

// This plugin adds each Tailwind color as a global CSS variable, e.g. var(--gray-200).
function addVariablesForColors({ addBase, theme }: any) {
  const allColors = flattenColorPalette(theme("colors"));
  const newVars = Object.fromEntries(Object.entries(allColors).map(([key, val]) => [`--${key}`, val]));

  addBase({
    ":root": newVars,
  });
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    },
    "target": "ES2017"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
